package autowire

import (
	"text/template"
)

var (
	factoryTemplate *template.Template
)

const tmplGenFile = `
// Code generated by go-autowire. DO NOT EDIT.
package {{$.PackageName}}

import (
	{{range $i := $.GenFile.Imports.List -}}
	{{if $i.ExplicitAlias}} {{$i.Alias}} {{end}} "{{$i.PackagePath}}"
	{{end -}}
)

{{if $.GenFile.Components}}
var _ = autowire.Register(
{{- range $c := $.Components -}}
{{template "tmplComponentFactory" $c}}
{{- end}}
)
{{end}}

{{if $.Applications}}
{{range $a := $.Applications}}
{{template "tmplApp" $a}}
{{end}}
{{end}}
`

const tmplComponentFactory = `
autowire.ComponentFactory[{{$.Type.TypeName}}]{
	Name: "{{$.Alias}}",
    Ptr: {{$.Ptr}},
	Primary: {{$.Primary}},
	Configuration: {{$.IsConfiguration}},
    {{if $.Implements -}}
	Implement: []autowire.Type{
		{{range $impl := $.Implements -}}
			autowire.TypeOf[{{$impl.TypeName}}](),	
		{{end}}
	},
    {{- end}}
	{{if $.Condition -}}
	Condition: &autowire.Condition{
		Key: "{{$.Condition.Key}}",
		Value: "{{$.Condition.Value}}",
	},
	{{- end}}
	{{if $.Injectors -}}
	FieldInjectors: []autowire.Injector[{{$.Type.TypeName}}]{
		{{range $ij := $.Injectors -}}{{template "tmplInjector" $ij}}{{- end}}
	},
	{{- end}}
	{{if $.PostConstruct -}}
	PostConstruct: func(c *{{$.Type.TypeName}}) {
		{{if $.PostConstruct.HasErrorResp}}
		err := c.{{$.PostConstruct.MethodName}}()
		if err != nil {
			panic(err)
		}
		{{else}}
		c.{{$.PostConstruct.MethodName}}()
		{{end}}
	},
	{{end}}
},
{{if $.IsConfiguration}}
{{range $bean := $.Beans}}
autowire.BeanFactory[{{$.Type.TypeNameComplete}}, {{$bean.Type.TypeNameComplete}}]{
	Name: "{{$bean.Alias}}",
	ComponentName: "{{$.Alias}}",
	BuildFunc: func(comp *{{$.Type.TypeNameComplete}}) {{$bean.Type.TypeNameComplete}} {
		return comp.{{$bean.Method}}()			
	},
},
{{end}}
{{range $property := $.Properties}}
autowire.PropertyFactory[{{$.Type.TypeNameComplete}}, {{$property.Type.TypeNameComplete}}]{
	Scope: "{{$property.Scope}}",
	ComponentName: "{{$.Alias}}",
	BuildFunc: func(comp *{{$.Type.TypeNameComplete}}) {{$property.Type.TypeNameComplete}} {
		{{if $property.IsMethod}}
		return comp.{{$property.Value}}()
		{{else}}
		return comp.{{$property.Value}}
		{{end}}
	},
},
{{end}}
{{end}}
`

const tmplInjector = `
{{- if eq $.Kind "component" -}}
autowire.ComponentInjector[{{$.CompType.TypeName}}, {{$.Type.TypeNameComplete}}]{
	{{if $.Qualifier}}Qualifier: "{{$.Qualifier}}",{{end}}
	Required: {{$.Required}},
	IsSlice: {{$.IsSlice}},
	{{if $.IsSlice}}
	InjectSliceFn: func(c *{{$.CompType.TypeName}}, d []{{$.Type.TypeNameComplete}}) {
		{{if $.IsMethod}}c.{{$.Value}}(d){{else}}c.{{$.Value}} = d{{end}}
	},
	{{else}}
	InjectFn: func(c *{{$.CompType.TypeName}}, d {{$.Type.TypeNameComplete}}) {
		{{if $.IsMethod}}c.{{$.Value}}(d){{else}}c.{{$.Value}} = d{{end}}	
	},
	{{end}}
},
{{- else if eq $.Kind "value" -}}
autowire.ValueInjector[{{$.CompType.TypeName}}]{
	Key: "{{$.Key}}",
	Scope: "{{$.Scope}}",
	Required: {{$.Required}},
	InjectFn: func(c *{{$.CompType.TypeName}}, value any) {
		autowire.SetValue(&c.{{$.Value}}, value)
	},
},
{{- else if eq $.Kind "env" -}}
autowire.EnvInjector[{{$.CompType.TypeName}}]{
	Key: "{{$.Key}}",
	Required: {{$.Required}},
	InjectFn: func(c *{{$.CompType.TypeName}}, value string) {
		c.{{$.Value}} = value
	},
},
{{- end}}
`

const tmplApp = `
func (a *{{$.Type.TypeName}}) Autowire() {
	 autowire.Context().Inject(autowire.ApplicationFactory[{{$.Type.TypeName}}]{
		App: a,
		{{if $.Injectors}}
		Injectors: []autowire.Injector[{{$.Type.TypeName}}]{
			{{range $ij := $.Injectors}}
			{{template "tmplInjector" $ij}}
			{{end}}
		},
		{{end}}
		{{if $.PostConstruct -}}
		PostConstruct: func(c *{{$.Type.TypeName}}) {
			{{if $.PostConstruct.HasErrorResp}}
			err := c.{{$.PostConstruct.MethodName}}()
			if err != nil {
				panic(err)
			}
			{{else}}
			c.{{$.PostConstruct.MethodName}}()
			{{end}}
		},
		{{end}}
	})
}
`
